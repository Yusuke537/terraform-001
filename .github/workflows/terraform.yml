#TODO:
#In order to run on those things, do the following:
#! Define on listener for pull_request with targets [closed] 
#? Still decide how to define the folders to use based on the branches pushed...
#! Always run apply on either pushing to master or on pull request action closed with merged true for master

# .github/workflows/hello-world.yml
#The name of the workflow, will be displayed on the Github actions page
name: Terraform
# when to execute it, similar to Azure DevOps trigger keyword 
on: #[push, pull_request]
  push:
    branches:
      - master
      - feature
      - 'test/**'
  pull_request:
    types: [closed]
    branches: 
      - master

# list of jobs to execute 
jobs:
  terraform:
    name: Terraform
    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      SOURCE_DIR: ${{ github.workspace }}/src/infra/

    # which OS to use when running this action
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Extract branchref
      id: extract_branchref
      shell: bash
      run: echo "##[set-output name=branch;]$( IFS="/" read -ra SPLIT_REF <<< ${GITHUB_REF}; echo ${SPLIT_REF[2]})"

    - name: SourceSubfolder
      id: get_subfolder
      run: echo ${{SOURCE_DIR}}${{steps.extract_branchref.outputs.branch}}
      if: ${{ steps.extract_branchref.outputs.branch }} == 'master' || 
          ${{ steps.extract_branchref.outputs.branch }} == 'feature'||
          ${{ steps.extract_branchref.outputs.branch }} == 'test'
      #run: echo "##[set-output name=subfolder;]$( echo $SOURCE_DIR${{steps.extract_branchref.outputs.branch}} )"

    - name: Test12
      run: echo ${{ steps.get_subfolder.outputs.subfolder }}

    #- name: SourceDev
    #  id: DevBranch
    #  if: ${{ steps.extract_branchref.outputs.branch }} == 'feature'
    #  run: echo "##[set-output name=subfolder;]$( echo $SOURCE_DIR${{steps.extract_branchref.outputs.branch}} )"

    #- name: SourceTest
    #  id: TestBranch
    #  if: ${{ steps.extract_branchref.outputs.branch }} == 'test'
    #  run: echo "##[set-output name=subfolder;]$( echo $SOURCE_DIR${{steps.extract_branchref.outputs.branch}} )"

    - name: HashiCorp - Setup Terraform
      uses: hashicorp/setup-terraform@v1.1.0

    - name: Terraform Init
      id: init
      run: terraform init ${{ steps.get_subfolder.outputs.branch }}#$SOURCE_DIR

    - name: Terraform Validate
      id: validate
      run: terraform validate $SOURCE_DIR -no-color

    - name: Terraform Plan
      id: plan
      if: github.event_name == 'pull_request' && github.event.action == 'opened' #&& github.event.pull_request.merged == true
      run: terraform plan $SOURCE_DIR -no-color

    - name: Terraform Apply
      #if: github.ref == 'refs/heads/master' && github.event_name == 'push'
      #if: github.ref == 'refs/heads/master' && github.event.pull_request.merged == true
      #if: github.ref == 'refs/pull/13/merge' && github.event.pull_request.base.ref == 'master'
      if: github.event_name == 'push' && github.ref == 'refs/heads/master'
      #run: terraform apply -auto-approve $SOURCE_DIR
      run: |
        echo Terraform apply